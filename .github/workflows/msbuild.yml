name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
    - name: "Prepare: Set OS-Specific variables (ubuntu-latest)"
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "::set-env name=Z3_URL::https://github.com/Z3Prover/z3/releases/download/z3-4.8.4/z3-4.8.4.d6df51951f4c-x64-ubuntu-14.04.zip"
        echo "::set-env name=BUILD_RUNTIME::linux-x64"

    - name: "Prepare: Set OS-Specific variables (windows-latest)"
      if: matrix.os == 'windows-latest'
      run: |
        echo "::set-env name=Z3_URL::https://github.com/Z3Prover/z3/releases/download/z3-4.8.4/z3-4.8.4.d6df51951f4c-x64-win.zip"
        echo "::set-env name=BUILD_RUNTIME::win-x64"

    - name: "Prepare: Set OS-Specific variables (macos-latest)"
      if: matrix.os == 'macos-latest'
      run: |
        echo "::set-env name=Z3_URL::https://github.com/Z3Prover/z3/releases/download/z3-4.8.4/z3-4.8.4.d6df51951f4c-x64-osx-10.14.1.zip"
        echo "::set-env name=BUILD_RUNTIME::osx-x64"

    - name: "Prepare: Add msbuild to PATH (Windows)"
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.0
    - name: "Prepare: Setup Nuget"
      uses: nuget/setup-nuget@v1
    - name: "Prepare: Manually sync certs"
      if: matrix.os == 'ubuntu-latest'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - name: "Prepare: Checkout Dafny"
      uses: actions/checkout@v2
      with:
        path: dafny

    - name: "Dependencies: Checkout Boogie"
      uses: actions/checkout@v2
      with:
        repository: boogie-org/boogie
        ref: v2.4.21
        path: boogie
    - name: "Dependencies: Nuget Restore Boogie"
      run: nuget restore boogie/Source/Boogie.sln
    - name: "Dependencies: Build Boogie"
      run: msbuild boogie/Source/Boogie.sln
    - name: "Dependencies: Get Z3 (Linux/macOS)"
      if: matrix.os != 'windows-latest'
      run: |
        wget ${Z3_URL}
        unzip z3*.zip && rm z3*.zip && cp -r z3* dafny/Binaries/z3
    - name: "Dependencies: Get Z3 (Windows)"
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Invoke-WebRequest -OutFile z3.zip -Uri $env:Z3_URL
        Expand-Archive z3.zip
        Remove-Item z3.zip
        Move-Item z3/z3* dafny/Binaries/z3
        Remove-Item z3

    - name: "Build Dafny"
      working-directory: dafny
      shell: bash
      run: dotnet publish Source/Dafny.sln --framework net48 --runtime ${BUILD_RUNTIME} --output Binaries

    - name: "Upload Artifact: Dafny Binaries"
      uses: actions/upload-artifact@v2
      with:
        name: binaries-${{ matrix.os }}
        path: dafny/Binaries/*


  test:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        shard: [1, 2, 3, 4, 5]
      fail-fast: false

    steps:
    - name: "Prepare: Checkout Dafny"
      uses: actions/checkout@v2
      with:
        path: dafny
    - name: "Prepare: Add msbuild to PATH (Windows)"
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.0
    - name: "Prepare: Get Build Artifact"
      uses: actions/download-artifact@v2
      with:
        name: binaries-${{ matrix.os }}
        path: dafny/Binaries/
    - name: "Prepare: Fix artifact chmod" # See issue actions/upload-artifact#38
      if: ${{ matrix.os }} != 'windows-latest'
      run: chmod -R 770 dafny/Binaries/
    - name: "Prepare: Install Python"
      uses: actions/setup-python@v1
    - name: "Prepare: Install Node"
      uses: actions/setup-node@v1
    - name: "Prepare: Upgrade outdated pip"
      run: python -m pip install --upgrade pip

    - name: "Dependencies: Install lit, OutputCheck, pyyaml"
      run: pip install lit OutputCheck pyyaml
    - name: "Dependencies: Install bignumber.js"
      run: npm install bignumber.js

    - name: Run lit tests
      run: lit --time-tests -v --num-shards=5 --run-shard=${{ matrix.shard }} dafny/Test
